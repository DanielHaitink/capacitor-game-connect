{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,uBACX,SAAQ,SAAS;IAGjB;;;OAGG;IACH,KAAK,CAAC,MAAM;QACV,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,OAAkC;QACtD,OAAO,CAAC,IAAI,CAAC,0CAA0C,EAAE,OAAO,CAAC,CAAC;QAClE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,WAAW,CAAC,OAGjB;QACC,OAAO,CAAC,IAAI,CAAC,sCAAsC,EAAE,OAAO,CAAC,CAAC;QAC9D,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,gBAAgB;QACpB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CAAC,OAAkC;QACxD,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,OAAO,CAAC,CAAC;QACpE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,4BAA4B,CAAC,OAGlC;QACC,OAAO,CAAC,IAAI,CACV,uDAAuD,EACvD,OAAO,CACR,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { CapacitorGameConnectPlugin } from './definitions';\n\nexport class CapacitorGameConnectWeb\n  extends WebPlugin\n  implements CapacitorGameConnectPlugin\n{\n  /**\n   * * Method to sign-in a user to Google Play Services\n   *\n   */\n  async signIn(): Promise<any> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Method to display the Leaderboards view from Google Play Services SDK\n   *\n   * @param leaderboardID as string\n   */\n  async showLeaderboard(options: { leaderboardID: string }): Promise<void> {\n    console.info('showLeaderboard function has been called', options);\n    return Promise.resolve();\n  }\n\n  /**\n   * * Method to submit a score to the Google Play Services SDK\n   *\n   * @returns Promise\n   */\n  async submitScore(options: {\n    leaderboardID: string;\n    totalScoreAmount: number;\n  }): Promise<void> {\n    console.info('submitScore function has been called', options);\n    return Promise.resolve();\n  }\n\n  /**\n   * * Method to display the Achievements view from Google Play SDK\n   *\n   * @returns Promise\n   */\n  async showAchievements(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * * Method to unlock an achievement\n   *\n   * @returns  Promise\n   */\n  async unlockAchievement(options: { achievementID: string }): Promise<void> {\n    console.info('unlockAchievement function has been called', options);\n    return Promise.resolve();\n  }\n\n  /**\n   * * Method to increment the progress of an achievement\n   *\n   * @returns Promise\n   */\n  async incrementAchievementProgress(options: {\n    achievementID: string;\n    pointsToIncrement: number;\n  }): Promise<void> {\n    console.info(\n      'incrementAchievementProgress function has been called',\n      options,\n    );\n    return Promise.resolve();\n  }\n}\n"]}